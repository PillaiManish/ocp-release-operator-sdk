diff --git a/Makefile b/Makefile
index d9cf67854..011861062 100644
--- Makefile
+++ Makefile
@@ -57,7 +57,7 @@ fix: ## Fixup files in the repo.
 
 .PHONY: setup-lint
 setup-lint: ## Setup the lint
-	$(SCRIPTS_DIR)/fetch golangci-lint 1.51.2
+	$(SCRIPTS_DIR)/fetch golangci-lint 1.54.2
 
 .PHONY: lint
 lint: setup-lint ## Run the lint check
diff --git a/hack/generate/samples/internal/pkg/utils.go b/hack/generate/samples/internal/pkg/utils.go
index 431b6267a..e8db04545 100644
--- hack/generate/samples/internal/pkg/utils.go
+++ hack/generate/samples/internal/pkg/utils.go
@@ -54,11 +54,7 @@ func (ctx SampleContext) StripBundleAnnotations() (err error) {
 		filepath.Join(ctx.Dir, "bundle", "manifests", ctx.ProjectName+".clusterserviceversion.yaml"),
 		filepath.Join(ctx.Dir, "config", "manifests", "bases", ctx.ProjectName+".clusterserviceversion.yaml"),
 	}
-	if err = removeAllAnnotationLines(manifestsAnnotations, manifestsFiles); err != nil {
-		return err
-	}
-
-	return nil
+	return removeAllAnnotationLines(manifestsAnnotations, manifestsFiles)
 }
 
 // removeAllAnnotationLines removes each line containing a key in annotations from all files at filePaths.
diff --git a/internal/ansible/flags/flag.go b/internal/ansible/flags/flag.go
index c78ebb28b..df88b088d 100644
--- internal/ansible/flags/flag.go
+++ internal/ansible/flags/flag.go
@@ -52,6 +52,7 @@ type Flags struct {
 	flagSet *pflag.FlagSet
 }
 
+//nolint:gosec
 const (
 	AnsibleRolesPathEnvVar       = "ANSIBLE_ROLES_PATH"
 	AnsibleCollectionsPathEnvVar = "ANSIBLE_COLLECTIONS_PATH"
diff --git a/internal/ansible/proxy/kubectl.go b/internal/ansible/proxy/kubectl.go
index 165100806..409b69279 100644
--- internal/ansible/proxy/kubectl.go
+++ internal/ansible/proxy/kubectl.go
@@ -160,7 +160,7 @@ type server struct {
 
 type responder struct{}
 
-func (r *responder) Error(w http.ResponseWriter, req *http.Request, err error) {
+func (r *responder) Error(w http.ResponseWriter, _ *http.Request, err error) {
 	log.Error(err, "Error while proxying request")
 	http.Error(w, err.Error(), http.StatusInternalServerError)
 }
diff --git a/internal/ansible/runner/fake/runner.go b/internal/ansible/runner/fake/runner.go
index d105076e9..23559875f 100644
--- internal/ansible/runner/fake/runner.go
+++ internal/ansible/runner/fake/runner.go
@@ -56,7 +56,7 @@ func (r *runResult) Stdout() (string, error) {
 }
 
 // Run - runs the fake runner.
-func (r *Runner) Run(_ string, u *unstructured.Unstructured, _ string) (runner.RunResult, error) {
+func (r *Runner) Run(_ string, _ *unstructured.Unstructured, _ string) (runner.RunResult, error) {
 	if r.Error != nil {
 		return nil, r.Error
 	}
diff --git a/internal/cmd/operator-sdk/generate/packagemanifests/packagemanifests.go b/internal/cmd/operator-sdk/generate/packagemanifests/packagemanifests.go
index 293d49c90..97e9363b9 100644
--- internal/cmd/operator-sdk/generate/packagemanifests/packagemanifests.go
+++ internal/cmd/operator-sdk/generate/packagemanifests/packagemanifests.go
@@ -112,7 +112,6 @@ func (c *packagemanifestsCmd) setDefaults() (err error) {
 
 // validate validates c for package manifests generation.
 func (c packagemanifestsCmd) validate() error {
-
 	if c.version != "" {
 		if err := genutil.ValidateVersion(c.version); err != nil {
 			return err
@@ -155,7 +154,6 @@ func (c packagemanifestsCmd) validate() error {
 
 // run generates package manifests.
 func (c packagemanifestsCmd) run() error {
-
 	c.println("Generating package manifests version", c.version)
 
 	if err := c.generatePackageManifest(); err != nil {
@@ -227,8 +225,8 @@ func (c packagemanifestsCmd) run() error {
 }
 
 func (c packagemanifestsCmd) generatePackageManifest() error {
-	//copy of genpkg withfilewriter()
-	//move out of internal util pkg?
+	// copy of genpkg withfilewriter()
+	// move out of internal util pkg?
 	if err := os.MkdirAll(c.outputDir, 0755); err != nil {
 		return err
 	}
@@ -239,8 +237,5 @@ func (c packagemanifestsCmd) generatePackageManifest() error {
 		IsDefaultChannel: c.isDefaultChannel,
 	}
 
-	if err := c.generator.Generate(c.packageName, c.version, c.outputDir, opts); err != nil {
-		return err
-	}
-	return nil
+	return c.generator.Generate(c.packageName, c.version, c.outputDir, opts)
 }
diff --git a/internal/generate/clusterserviceversion/clusterserviceversion_updaters.go b/internal/generate/clusterserviceversion/clusterserviceversion_updaters.go
index f43103b78..0fbae2455 100644
--- internal/generate/clusterserviceversion/clusterserviceversion_updaters.go
+++ internal/generate/clusterserviceversion/clusterserviceversion_updaters.go
@@ -425,7 +425,6 @@ type serviceportPath struct {
 // crdGroups groups the crds with similar service port and name. It returns a map of serviceportPath
 // and the corresponding crd names.
 func crdGroups(crdToConfig map[string]apiextv1.WebhookConversion) map[serviceportPath][]string {
-
 	uniqueConfig := make(map[serviceportPath][]string)
 
 	for crdName, config := range crdToConfig {
@@ -574,7 +573,7 @@ func mutatingToWebhookDescription(webhook admissionregv1.MutatingWebhook, depNam
 func findMatchingDeploymentAndServiceForWebhook(c *collector.Manifests, wcc admissionregv1.WebhookClientConfig) (depName string, ws *corev1.Service) {
 	// Return if a service reference is not specified, since a URL will be in that case.
 	if wcc.Service == nil {
-		return
+		return depName, ws
 	}
 
 	// Find the matching service, if any. The webhook server may be externally managed
@@ -586,18 +585,18 @@ func findMatchingDeploymentAndServiceForWebhook(c *collector.Manifests, wcc admi
 		}
 	}
 	if ws == nil {
-		return
+		return depName, ws
 	}
 
 	// Only ExternalName-type services cannot have selectors.
 	if ws.Spec.Type == corev1.ServiceTypeExternalName {
-		return
+		return depName, ws
 	}
 
 	// If a selector does not exist, there is either an Endpoint or EndpointSlice object accompanying
 	// the service so it should not be added to the CSV.
 	if len(ws.Spec.Selector) == 0 {
-		return
+		return depName, ws
 	}
 
 	depName = findMatchingDepNameFromService(c, ws)
diff --git a/internal/helm/client/secrets_watch.go b/internal/helm/client/secrets_watch.go
index e9cd46801..a61c7532a 100644
--- internal/helm/client/secrets_watch.go
+++ internal/helm/client/secrets_watch.go
@@ -117,7 +117,7 @@ func (w *WatchedSecrets) Watch(ctx context.Context, opts metav1.ListOptions) (wa
 	return w.inner.Watch(ctx, opts)
 }
 
-func (w *WatchedSecrets) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *corev1.Secret, err error) {
+func (w *WatchedSecrets) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, _ ...string) (result *corev1.Secret, err error) {
 	return w.inner.Patch(ctx, name, pt, data, opts)
 }
 
diff --git a/internal/helm/release/manager.go b/internal/helm/release/manager.go
index 07641ccc7..72a246461 100644
--- internal/helm/release/manager.go
+++ internal/helm/release/manager.go
@@ -95,7 +95,7 @@ func (m manager) IsUpgradeRequired() bool {
 
 // Sync ensures the Helm storage backend is in sync with the status of the
 // custom resource.
-func (m *manager) Sync(ctx context.Context) error {
+func (m *manager) Sync(_ context.Context) error {
 	// Get release history for this release name
 	releases, err := m.storageBackend.History(m.releaseName)
 	if err != nil && !notFoundErr(err) {
@@ -161,7 +161,7 @@ func (m manager) getCandidateRelease(namespace, name string, chart *cpb.Chart,
 }
 
 // InstallRelease performs a Helm release install.
-func (m manager) InstallRelease(ctx context.Context, opts ...InstallOption) (*rpb.Release, error) {
+func (m manager) InstallRelease(_ context.Context, opts ...InstallOption) (*rpb.Release, error) {
 	install := action.NewInstall(m.actionConfig)
 	install.ReleaseName = m.releaseName
 	install.Namespace = m.namespace
@@ -203,7 +203,7 @@ func ForceUpgrade(force bool) UpgradeOption {
 }
 
 // UpgradeRelease performs a Helm release upgrade.
-func (m manager) UpgradeRelease(ctx context.Context, opts ...UpgradeOption) (*rpb.Release, *rpb.Release, error) {
+func (m manager) UpgradeRelease(_ context.Context, opts ...UpgradeOption) (*rpb.Release, *rpb.Release, error) {
 	upgrade := action.NewUpgrade(m.actionConfig)
 	upgrade.Namespace = m.namespace
 	for _, o := range opts {
@@ -362,7 +362,7 @@ func createJSONMergePatch(existingJSON, expectedJSON []byte) ([]byte, error) {
 }
 
 // UninstallRelease performs a Helm release uninstall.
-func (m manager) UninstallRelease(ctx context.Context, opts ...UninstallOption) (*rpb.Release, error) {
+func (m manager) UninstallRelease(_ context.Context, opts ...UninstallOption) (*rpb.Release, error) {
 	uninstall := action.NewUninstall(m.actionConfig)
 	for _, o := range opts {
 		if err := o(uninstall); err != nil {
@@ -378,7 +378,7 @@ func (m manager) UninstallRelease(ctx context.Context, opts ...UninstallOption)
 
 // CleanupRelease deletes resources if they are not deleted already.
 // Return true if all the resources are deleted, false otherwise.
-func (m manager) CleanupRelease(ctx context.Context, manifest string) (bool, error) {
+func (m manager) CleanupRelease(_ context.Context, manifest string) (bool, error) {
 	dc, err := m.actionConfig.RESTClientGetter.ToDiscoveryClient()
 	if err != nil {
 		return false, fmt.Errorf("failed to get Kubernetes discovery client: %w", err)
diff --git a/internal/olm/installer/client.go b/internal/olm/installer/client.go
index 748a477c6..e430182e0 100644
--- internal/olm/installer/client.go
+++ internal/olm/installer/client.go
@@ -134,7 +134,7 @@ func (c Client) InstallVersion(ctx context.Context, namespace, version string) (
 	return &status, nil
 }
 
-func (c Client) UninstallVersion(ctx context.Context, namespace, version string) error {
+func (c Client) UninstallVersion(ctx context.Context, _, version string) error {
 	resources, err := c.getResources(ctx, version)
 	if err != nil {
 		return fmt.Errorf("failed to get resources: %v", err)
@@ -148,13 +148,10 @@ func (c Client) UninstallVersion(ctx context.Context, namespace, version string)
 	}
 
 	log.Infof("Uninstalling resources for version %q", version)
-	if err := c.DoDelete(ctx, objs...); err != nil {
-		return err
-	}
-	return nil
+	return c.DoDelete(ctx, objs...)
 }
 
-func (c Client) GetStatus(ctx context.Context, namespace, version string) (*olmresourceclient.Status, error) {
+func (c Client) GetStatus(ctx context.Context, _, version string) (*olmresourceclient.Status, error) {
 	resources, err := c.getResources(ctx, version)
 	if err != nil {
 		return nil, fmt.Errorf("failed to get resources: %v", err)
diff --git a/internal/olm/operator/registry/configmap.go b/internal/olm/operator/registry/configmap.go
index fee995581..82aa8ac45 100644
--- internal/olm/operator/registry/configmap.go
+++ internal/olm/operator/registry/configmap.go
@@ -104,18 +104,12 @@ func (c *ConfigMapCatalogCreator) updateCatalogSource(ctx context.Context, cs *v
 		Namespace: c.cfg.Namespace,
 		Name:      cs.GetName(),
 	}
-	if err := retry.RetryOnConflict(retry.DefaultBackoff, func() error {
+	return retry.RetryOnConflict(retry.DefaultBackoff, func() error {
 		if err := c.cfg.Client.Get(ctx, catsrcKey, cs); err != nil {
 			return err
 		}
 		cs.Spec.Address = registryGRPCAddr
 		cs.Spec.SourceType = v1alpha1.SourceTypeGrpc
-		if err := c.cfg.Client.Update(ctx, cs); err != nil {
-			return err
-		}
-		return nil
-	}); err != nil {
-		return fmt.Errorf("error setting grpc address on catalog source: %v", err)
-	}
-	return nil
+		return c.cfg.Client.Update(ctx, cs)
+	})
 }
diff --git a/internal/plugins/ansible/v1/api.go b/internal/plugins/ansible/v1/api.go
index 47c35b858..d1436e63e 100644
--- internal/plugins/ansible/v1/api.go
+++ internal/plugins/ansible/v1/api.go
@@ -159,9 +159,5 @@ func (p *createAPISubcommand) Scaffold(fs machinery.Filesystem) error {
 
 	scaffolder := scaffolds.NewCreateAPIScaffolder(p.config, *p.resource, p.options.DoRole, p.options.DoPlaybook)
 	scaffolder.InjectFS(fs)
-	if err := scaffolder.Scaffold(); err != nil {
-		return err
-	}
-
-	return nil
+	return scaffolder.Scaffold()
 }
diff --git a/internal/plugins/ansible/v1/scaffolds/internal/templates/requirements.go b/internal/plugins/ansible/v1/scaffolds/internal/templates/requirements.go
index 56798546d..5043103ea 100644
--- internal/plugins/ansible/v1/scaffolds/internal/templates/requirements.go
+++ internal/plugins/ansible/v1/scaffolds/internal/templates/requirements.go
@@ -38,7 +38,7 @@ collections:
   - name: operator_sdk.util
     version: "0.5.0"
   - name: kubernetes.core
-    version: "2.4.0"
+    version: "2.4.2"
   - name: cloud.common
     version: "2.1.1"
   - name: community.docker
diff --git a/internal/scorecard/scorecard.go b/internal/scorecard/scorecard.go
index 8656fbfda..4c58fd952 100644
--- internal/scorecard/scorecard.go
+++ internal/scorecard/scorecard.go
@@ -273,7 +273,7 @@ func (r PodTestRunner) RunTest(ctx context.Context, test v1alpha3.TestConfigurat
 }
 
 // RunTest executes a single test
-func (r FakeTestRunner) RunTest(ctx context.Context, test v1alpha3.TestConfiguration, podSec bool) (result *v1alpha3.TestStatus, err error) {
+func (r FakeTestRunner) RunTest(ctx context.Context, _ v1alpha3.TestConfiguration, _ bool) (result *v1alpha3.TestStatus, err error) {
 	select {
 	case <-time.After(r.Sleep):
 		return r.TestStatus, r.Error
diff --git a/internal/scorecard/tests/olm.go b/internal/scorecard/tests/olm.go
index 16b164bde..36d8634ba 100644
--- internal/scorecard/tests/olm.go
+++ internal/scorecard/tests/olm.go
@@ -36,6 +36,7 @@ import (
 	"github.com/operator-framework/operator-sdk/internal/util/k8sutil"
 )
 
+//nolint:gosec
 const (
 	OLMBundleValidationTest   = "olm-bundle-validation"
 	OLMCRDsHaveValidationTest = "olm-crds-have-validation"
diff --git a/internal/testutils/olm.go b/internal/testutils/olm.go
index 330aac1ae..d08164615 100644
--- internal/testutils/olm.go
+++ internal/testutils/olm.go
@@ -89,9 +89,5 @@ func (tc TestContext) GenerateBundle() error {
 		return err
 	}
 
-	if err := tc.Make("bundle", "IMG="+tc.ImageName); err != nil {
-		return err
-	}
-
-	return nil
+	return tc.Make("bundle", "IMG="+tc.ImageName)
 }
diff --git a/internal/validate/result.go b/internal/validate/result.go
index 69b4b0e6e..f7bbdf2ce 100644
--- internal/validate/result.go
+++ internal/validate/result.go
@@ -109,10 +109,7 @@ func (r *Result) Combine(results ...Result) error {
 	for _, result := range results {
 		r.Outputs = append(r.Outputs, result.Outputs...)
 	}
-	if err := r.prepare(); err != nil {
-		return err
-	}
-	return nil
+	return r.prepare()
 }
 
 // prepare should be used when writing an Result to a non-log writer.
diff --git a/release/changelog/internal/fragment_test.go b/release/changelog/internal/fragment_test.go
index 738774715..e531e97e9 100644
--- release/changelog/internal/fragment_test.go
+++ release/changelog/internal/fragment_test.go
@@ -12,7 +12,7 @@ type mockValidPRGetter struct{}
 
 var _ PullRequestNumberGetter = &mockValidPRGetter{}
 
-func (m *mockValidPRGetter) GetPullRequestNumberFor(file string) (uint, error) {
+func (m *mockValidPRGetter) GetPullRequestNumberFor(_ string) (uint, error) {
 	return 999998, nil
 }
 
diff --git a/testdata/ansible/memcached-operator/requirements.yml b/testdata/ansible/memcached-operator/requirements.yml
index 8baf91913..52d29d021 100644
--- testdata/ansible/memcached-operator/requirements.yml
+++ testdata/ansible/memcached-operator/requirements.yml
@@ -3,7 +3,7 @@ collections:
   - name: operator_sdk.util
     version: "0.5.0"
   - name: kubernetes.core
-    version: "2.4.0"
+    version: "2.4.2"
   - name: cloud.common
     version: "2.1.1"
   - name: community.docker
