diff -up ./internal/cmd/operator-sdk/generate/bundle/bundle.go.image-digests ./internal/cmd/operator-sdk/generate/bundle/bundle.go
--- ./internal/cmd/operator-sdk/generate/bundle/bundle.go.image-digests	2022-01-27 15:50:47.548705153 -0500
+++ ./internal/cmd/operator-sdk/generate/bundle/bundle.go	2022-01-27 16:27:14.612351105 -0500
@@ -20,9 +20,14 @@ import (
 	"io/ioutil"
 	"os"
 	"path/filepath"
+	"strings"
 
 	"github.com/operator-framework/api/pkg/apis/scorecard/v1alpha3"
+	"github.com/operator-framework/operator-manifest-tools/pkg/image"
+	"github.com/operator-framework/operator-manifest-tools/pkg/imageresolver"
+	"github.com/operator-framework/operator-manifest-tools/pkg/pullspec"
 	"github.com/operator-framework/operator-registry/pkg/lib/bundle"
+	corev1 "k8s.io/api/core/v1"
 	"sigs.k8s.io/yaml"
 
 	metricsannotations "github.com/operator-framework/operator-sdk/internal/annotations/metrics"
@@ -188,6 +193,11 @@ func (c bundleCmd) runManifests() (err e
 		c.println("Building a ClusterServiceVersion without an existing base")
 	}
 
+	relatedImages, err := c.findRelatedImages(col)
+	if err != nil {
+		return err
+	}
+
 	var opts []gencsv.Option
 	stdout := genutil.NewMultiManifestWriter(os.Stdout)
 	if c.stdout {
@@ -202,6 +212,7 @@ func (c bundleCmd) runManifests() (err e
 		Collector:            col,
 		Annotations:          metricsannotations.MakeBundleObjectAnnotations(c.layout),
 		ExtraServiceAccounts: c.extraServiceAccounts,
+		RelatedImages:        relatedImages,
 	}
 	if err := csvGen.Generate(opts...); err != nil {
 		return fmt.Errorf("error generating ClusterServiceVersion: %v", err)
@@ -219,6 +230,14 @@ func (c bundleCmd) runManifests() (err e
 		}
 	}
 
+	// Pin images to digests if enabled
+	if c.useImageDigests {
+		c.println("pinning image versions to digests instead of tags")
+		if err := c.pinImages(filepath.Join(c.outputDir, "manifests")); err != nil {
+			return err
+		}
+	}
+
 	// Write the scorecard config if it was passed.
 	if err := writeScorecardConfig(c.outputDir, col.ScorecardConfig); err != nil {
 		return fmt.Errorf("error writing bundle scorecard config: %v", err)
@@ -251,9 +270,7 @@ func writeScorecardConfig(dir string, cf
 
 // runMetadata generates a bundle.Dockerfile and bundle metadata.
 func (c bundleCmd) runMetadata() error {
-
 	c.println("Generating bundle metadata")
-
 	if c.outputDir == "" {
 		c.outputDir = defaultRootDir
 	}
@@ -287,3 +304,74 @@ func (c bundleCmd) runMetadata() error {
 
 	return bundleMetadata.GenerateMetadata()
 }
+
+// findRelatedImages looks in the controller manager's environment for images used by the operator.
+func (c bundleCmd) findRelatedImages(col *collector.Manifests) (map[string]string, error) {
+	const relatedImagePrefix = "RELATED_IMAGE_"
+	env, err := c.findManagerEnvironment(col)
+	if err != nil {
+		return nil, err
+	}
+	imageNames := make(map[string]string, len(env))
+	for _, envVar := range env {
+		if strings.HasPrefix(envVar.Name, relatedImagePrefix) {
+			if envVar.ValueFrom != nil {
+				return nil, fmt.Errorf("related images with valueFrom field unsupported, found in %s`", envVar.Name)
+			}
+
+			// transforms RELATED_IMAGE_This_IS_a_cool_image to this-is-a-cool-image
+			name := strings.ToLower(strings.Replace(strings.TrimPrefix(envVar.Name, relatedImagePrefix), "_", "-", -1))
+			imageNames[name] = envVar.Value
+		}
+	}
+
+	return imageNames, nil
+}
+
+// findManagerEnvironment returns the environment passed to the controller manager container.
+func (c bundleCmd) findManagerEnvironment(col *collector.Manifests) ([]corev1.EnvVar, error) {
+	const (
+		managerLabel         = "control-plane"
+		managerLabelValue    = "controller-manager"
+		managerContainerName = "manager"
+	)
+
+	for _, deployment := range col.Deployments {
+		if val, ok := deployment.GetLabels()[managerLabel]; ok && val == managerLabelValue {
+			for _, container := range deployment.Spec.Template.Spec.Containers {
+				if container.Name == managerContainerName {
+					return container.Env, nil
+				}
+			}
+
+			return nil, fmt.Errorf("manager deployment does not have container named %q", managerContainerName)
+		}
+	}
+
+	return nil, fmt.Errorf(
+		"could not find manager deployment, should have label %s=%s", managerLabel, managerLabelValue,
+	)
+}
+
+// pinImages is used to replace all image tags in the given manifests with digests
+func (c bundleCmd) pinImages(manifestPath string) error {
+	manifests, err := pullspec.FromDirectory(manifestPath, nil)
+	if err != nil {
+		return err
+	}
+	resolver, err := imageresolver.GetResolver(imageresolver.ResolverCrane, nil)
+	if err != nil {
+		return err
+	}
+	if err := image.Pin(resolver, manifests); err != nil {
+		return err
+	}
+
+	for _, manifest := range manifests {
+		if err := manifest.Dump(nil); err != nil {
+			return err
+		}
+	}
+
+	return nil
+}
diff -up ./internal/cmd/operator-sdk/generate/bundle/cmd.go.image-digests ./internal/cmd/operator-sdk/generate/bundle/cmd.go
--- ./internal/cmd/operator-sdk/generate/bundle/cmd.go.image-digests	2022-01-27 15:50:47.873715179 -0500
+++ ./internal/cmd/operator-sdk/generate/bundle/cmd.go	2022-01-27 16:27:14.613351137 -0500
@@ -49,6 +49,9 @@ type bundleCmd struct {
 	// These are set if a PROJECT config is not present.
 	layout      string
 	packageName string
+
+	// Use Image Digests flag to toggle using traditional Image tags vs SHA Digests
+	useImageDigests bool
 }
 
 // NewCmd returns the 'bundle' command configured for the new project layout.
@@ -139,6 +142,8 @@ func (c *bundleCmd) addFlagsTo(fs *pflag
 	fs.BoolVar(&c.stdout, "stdout", false, "Write bundle manifest to stdout")
 
 	fs.StringVar(&c.packageName, "package", "", "Bundle's package name")
+
+	fs.BoolVar(&c.useImageDigests, "use-image-digests", false, "Use SHA Digest for images")
 }
 
 func (c bundleCmd) println(a ...interface{}) {
diff -up ./internal/generate/clusterserviceversion/clusterserviceversion.go.image-digests ./internal/generate/clusterserviceversion/clusterserviceversion.go
--- ./internal/generate/clusterserviceversion/clusterserviceversion.go.image-digests	2022-01-27 15:50:48.294728167 -0500
+++ ./internal/generate/clusterserviceversion/clusterserviceversion.go	2022-01-27 16:27:14.614351167 -0500
@@ -18,6 +18,7 @@ import (
 	"fmt"
 	"io"
 	"path/filepath"
+	"sort"
 	"strings"
 
 	"github.com/blang/semver/v4"
@@ -56,6 +57,9 @@ type Generator struct {
 	// ExtraServiceAccounts are ServiceAccount names to consider when matching
 	// {Cluster}Roles to include in a CSV via their Bindings.
 	ExtraServiceAccounts []string
+	// RelatedImages are additional images used by the operator.
+	// It is a mapping of an image name to an image URL
+	RelatedImages map[string]string
 
 	// Func that returns the writer the generated CSV's bytes are written to.
 	getWriter func() (io.Writer, error)
@@ -165,6 +169,16 @@ func (g *Generator) generate() (base *op
 	if g.FromVersion != "" {
 		base.Spec.Replaces = genutil.MakeCSVName(g.OperatorName, g.FromVersion)
 	}
+	if len(g.RelatedImages) > 0 {
+		base.Spec.RelatedImages = make([]operatorsv1alpha1.RelatedImage, 0, len(g.RelatedImages))
+		for name, image := range g.RelatedImages {
+			base.Spec.RelatedImages = append(base.Spec.RelatedImages, operatorsv1alpha1.RelatedImage{Name: name, Image: image})
+		}
+		// ensure deterministic order
+		sort.SliceStable(base.Spec.RelatedImages, func(i, j int) bool {
+			return strings.Compare(base.Spec.RelatedImages[i].Name, base.Spec.RelatedImages[j].Name) > 0
+		})
+	}
 
 	if err := ApplyTo(g.Collector, base, g.ExtraServiceAccounts); err != nil {
 		return nil, err
diff -up ./internal/plugins/manifests/v2/init.go.image-digests ./internal/plugins/manifests/v2/init.go
--- ./internal/plugins/manifests/v2/init.go.image-digests	2022-01-27 15:50:48.664739582 -0500
+++ ./internal/plugins/manifests/v2/init.go	2022-01-27 16:27:14.614351167 -0500
@@ -155,6 +155,17 @@ IMAGE_TAG_BASE ?= %[1]s/%[2]s
 # BUNDLE_IMG defines the image:tag used for the bundle.
 # You can use it as an arg. (E.g make bundle-build BUNDLE_IMG=<some-registry>/<project-name-bundle>:<tag>)
 BUNDLE_IMG ?= $(IMAGE_TAG_BASE)-bundle:v$(VERSION)
+
+# BUNDLE_GEN_FLAGS are the flags passed to the operator-sdk generate bundle command
+BUNDLE_GEN_FLAGS ?= -q --overwrite --version $(VERSION) $(BUNDLE_METADATA_OPTS)
+
+# USE_IMAGE_DIGESTS defines if images are resolved via tags or digests
+# You can enable this value if you would like to use SHA Based Digests
+# To enable set flag to true
+USE_IMAGE_DIGESTS ?= false
+ifeq ($(USE_IMAGE_DIGESTS), true)
+	BUNDLE_GEN_FLAGS += --use-image-digests
+endif
 `
 
 	makefileBundleFragmentGo = `
@@ -162,7 +173,7 @@ BUNDLE_IMG ?= $(IMAGE_TAG_BASE)-bundle:v
 bundle: manifests kustomize ## Generate bundle manifests and metadata, then validate generated files.
 	operator-sdk generate kustomize manifests -q
 	cd config/manager && $(KUSTOMIZE) edit set image controller=$(IMG)
-	$(KUSTOMIZE) build config/manifests | operator-sdk generate bundle -q --overwrite --version $(VERSION) $(BUNDLE_METADATA_OPTS)
+	$(KUSTOMIZE) build config/manifests | operator-sdk generate bundle $(BUNDLE_GEN_FLAGS)
 	operator-sdk bundle validate ./bundle
 `
 
diff -up ./testdata/ansible/memcached-operator/Makefile.image-digests ./testdata/ansible/memcached-operator/Makefile
--- ./testdata/ansible/memcached-operator/Makefile.image-digests	2022-01-27 15:50:49.087752631 -0500
+++ ./testdata/ansible/memcached-operator/Makefile	2022-01-27 16:27:14.615351198 -0500
@@ -35,6 +35,17 @@ IMAGE_TAG_BASE ?= example.com/memcached-
 # You can use it as an arg. (E.g make bundle-build BUNDLE_IMG=<some-registry>/<project-name-bundle>:<tag>)
 BUNDLE_IMG ?= $(IMAGE_TAG_BASE)-bundle:v$(VERSION)
 
+# BUNDLE_GEN_FLAGS are the flags passed to the operator-sdk generate bundle command
+BUNDLE_GEN_FLAGS ?= -q --overwrite --version $(VERSION) $(BUNDLE_METADATA_OPTS)
+
+# USE_IMAGE_DIGESTS defines if images are resolved via tags or digests
+# You can enable this value if you would like to use SHA Based Digests
+# To enable set flag to true
+USE_IMAGE_DIGESTS ?= false
+ifeq ($(USE_IMAGE_DIGESTS), true)
+	BUNDLE_GEN_FLAGS += --use-image-digests
+endif
+
 # Image URL to use all building/pushing image targets
 IMG ?= controller:latest
 
@@ -92,7 +103,7 @@ undeploy: ## Undeploy controller from th
 	$(KUSTOMIZE) build config/default | kubectl delete -f -
 
 OS := $(shell uname -s | tr '[:upper:]' '[:lower:]')
-ARCH := $(shell uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/')
+ARCH := $(shell uname -m | sed 's/x86_64/amd64/')
 
 .PHONY: kustomize
 KUSTOMIZE = $(shell pwd)/bin/kustomize
diff -up ./testdata/go/v2/memcached-operator/Makefile.image-digests ./testdata/go/v2/memcached-operator/Makefile
--- ./testdata/go/v2/memcached-operator/Makefile.image-digests	2022-01-27 15:50:49.649769969 -0500
+++ ./testdata/go/v2/memcached-operator/Makefile	2022-01-27 16:27:14.615351198 -0500
@@ -35,10 +35,21 @@ IMAGE_TAG_BASE ?= example.com/memcached-
 # You can use it as an arg. (E.g make bundle-build BUNDLE_IMG=<some-registry>/<project-name-bundle>:<tag>)
 BUNDLE_IMG ?= $(IMAGE_TAG_BASE)-bundle:v$(VERSION)
 
+# BUNDLE_GEN_FLAGS are the flags passed to the operator-sdk generate bundle command
+BUNDLE_GEN_FLAGS ?= -q --overwrite --version $(VERSION) $(BUNDLE_METADATA_OPTS)
+
+# USE_IMAGE_DIGESTS defines if images are resolved via tags or digests
+# You can enable this value if you would like to use SHA Based Digests
+# To enable set flag to true
+USE_IMAGE_DIGESTS ?= false
+ifeq ($(USE_IMAGE_DIGESTS), true)
+	BUNDLE_GEN_FLAGS += --use-image-digests
+endif
+
 # Image URL to use all building/pushing image targets
 IMG ?= controller:latest
 # Produce CRDs that work back to Kubernetes 1.11 (no version conversion)
-CRD_OPTIONS ?= "crd:trivialVersions=true"
+CRD_OPTIONS ?= "crd:trivialVersions=true,preserveUnknownFields=false"
 
 # Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)
 ifeq (,$(shell go env GOBIN))
@@ -170,7 +181,7 @@ endif
 bundle: manifests kustomize ## Generate bundle manifests and metadata, then validate generated files.
 	operator-sdk generate kustomize manifests --interactive=false -q
 	cd config/manager && $(KUSTOMIZE) edit set image controller=$(IMG)
-	$(KUSTOMIZE) build config/manifests | operator-sdk generate bundle -q --overwrite --version $(VERSION) $(BUNDLE_METADATA_OPTS)
+	$(KUSTOMIZE) build config/manifests | operator-sdk generate bundle $(BUNDLE_GEN_FLAGS)
 	operator-sdk bundle validate ./bundle
 
 .PHONY: bundle-build
diff -up ./testdata/go/v3/memcached-operator/Makefile.image-digests ./testdata/go/v3/memcached-operator/Makefile
--- ./testdata/go/v3/memcached-operator/Makefile.image-digests	2022-01-27 15:50:50.109784160 -0500
+++ ./testdata/go/v3/memcached-operator/Makefile	2022-01-27 16:27:14.616351229 -0500
@@ -35,10 +35,21 @@ IMAGE_TAG_BASE ?= example.com/memcached-
 # You can use it as an arg. (E.g make bundle-build BUNDLE_IMG=<some-registry>/<project-name-bundle>:<tag>)
 BUNDLE_IMG ?= $(IMAGE_TAG_BASE)-bundle:v$(VERSION)
 
+# BUNDLE_GEN_FLAGS are the flags passed to the operator-sdk generate bundle command
+BUNDLE_GEN_FLAGS ?= -q --overwrite --version $(VERSION) $(BUNDLE_METADATA_OPTS)
+
+# USE_IMAGE_DIGESTS defines if images are resolved via tags or digests
+# You can enable this value if you would like to use SHA Based Digests
+# To enable set flag to true
+USE_IMAGE_DIGESTS ?= false
+ifeq ($(USE_IMAGE_DIGESTS), true)
+	BUNDLE_GEN_FLAGS += --use-image-digests
+endif
+
 # Image URL to use all building/pushing image targets
 IMG ?= controller:latest
 # ENVTEST_K8S_VERSION refers to the version of kubebuilder assets to be downloaded by envtest binary.
-ENVTEST_K8S_VERSION = 1.22
+ENVTEST_K8S_VERSION = 1.23
 
 # Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)
 ifeq (,$(shell go env GOBIN))
@@ -139,7 +150,7 @@ undeploy: ## Undeploy controller from th
 CONTROLLER_GEN = $(shell pwd)/bin/controller-gen
 .PHONY: controller-gen
 controller-gen: ## Download controller-gen locally if necessary.
-	$(call go-get-tool,$(CONTROLLER_GEN),sigs.k8s.io/controller-tools/cmd/controller-gen@v0.7.0)
+	$(call go-get-tool,$(CONTROLLER_GEN),sigs.k8s.io/controller-tools/cmd/controller-gen@v0.8.0)
 
 KUSTOMIZE = $(shell pwd)/bin/kustomize
 .PHONY: kustomize
@@ -169,7 +180,7 @@ endef
 bundle: manifests kustomize ## Generate bundle manifests and metadata, then validate generated files.
 	operator-sdk generate kustomize manifests --interactive=false -q
 	cd config/manager && $(KUSTOMIZE) edit set image controller=$(IMG)
-	$(KUSTOMIZE) build config/manifests | operator-sdk generate bundle -q --overwrite --version $(VERSION) $(BUNDLE_METADATA_OPTS)
+	$(KUSTOMIZE) build config/manifests | operator-sdk generate bundle $(BUNDLE_GEN_FLAGS)
 	operator-sdk bundle validate ./bundle
 
 .PHONY: bundle-build
diff -up ./testdata/helm/memcached-operator/Makefile.image-digests ./testdata/helm/memcached-operator/Makefile
--- ./testdata/helm/memcached-operator/Makefile.image-digests	2022-01-27 15:50:50.512796593 -0500
+++ ./testdata/helm/memcached-operator/Makefile	2022-01-27 16:27:14.616351229 -0500
@@ -35,6 +35,17 @@ IMAGE_TAG_BASE ?= example.com/memcached-
 # You can use it as an arg. (E.g make bundle-build BUNDLE_IMG=<some-registry>/<project-name-bundle>:<tag>)
 BUNDLE_IMG ?= $(IMAGE_TAG_BASE)-bundle:v$(VERSION)
 
+# BUNDLE_GEN_FLAGS are the flags passed to the operator-sdk generate bundle command
+BUNDLE_GEN_FLAGS ?= -q --overwrite --version $(VERSION) $(BUNDLE_METADATA_OPTS)
+
+# USE_IMAGE_DIGESTS defines if images are resolved via tags or digests
+# You can enable this value if you would like to use SHA Based Digests
+# To enable set flag to true
+USE_IMAGE_DIGESTS ?= false
+ifeq ($(USE_IMAGE_DIGESTS), true)
+	BUNDLE_GEN_FLAGS += --use-image-digests
+endif
+
 # Image URL to use all building/pushing image targets
 IMG ?= controller:latest
 
@@ -92,7 +103,7 @@ undeploy: ## Undeploy controller from th
 	$(KUSTOMIZE) build config/default | kubectl delete -f -
 
 OS := $(shell uname -s | tr '[:upper:]' '[:lower:]')
-ARCH := $(shell uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/')
+ARCH := $(shell uname -m | sed 's/x86_64/amd64/')
 
 .PHONY: kustomize
 KUSTOMIZE = $(shell pwd)/bin/kustomize
diff -up ./website/content/en/docs/cli/operator-sdk_generate_bundle.md.image-digests ./website/content/en/docs/cli/operator-sdk_generate_bundle.md
--- ./website/content/en/docs/cli/operator-sdk_generate_bundle.md.image-digests	2022-01-27 15:50:51.043812974 -0500
+++ ./website/content/en/docs/cli/operator-sdk_generate_bundle.md	2022-01-27 16:27:14.617351260 -0500
@@ -103,6 +103,7 @@ operator-sdk generate bundle [flags]
       --package string                   Bundle's package name
   -q, --quiet                            Run in quiet mode
       --stdout                           Write bundle manifest to stdout
+      --use-image-digests                Use SHA Digest for images
   -v, --version string                   Semantic version of the operator in the generated bundle. Only set if creating a new bundle or upgrading your operator
 ```
 
